{"ast":null,"code":"import { EventEmitter } from 'fbemitter';\nconst SERVER = 'http://localhost:5000';\n\nclass FeedbackStore {\n  constructor() {\n    this.emitter = new EventEmitter();\n    this.feedbacks = [];\n    this.specificFeedbacksActivity = [];\n    this.smileyCount = 0;\n    this.frownyCount = 0;\n    this.surprisedCount = 0;\n    this.confusedCount = 0;\n  }\n\n  async getFeedbacks() {\n    try {\n      let response = await fetch(`${SERVER}/feedback-api/feedbacks`);\n      let data = await response.json();\n      data.forEach(feedback => {\n        this.feedbacks.push({\n          id_activity: feedback.id_activity,\n          emoji: feedback.emoji\n        });\n      });\n      this.emitter.emit('GET_FEEDBACK_SUCCESS');\n    } catch (err) {\n      console.warn(err);\n      this.emitter.emit('GET_FEEDBACK_ERROR');\n    }\n  }\n\n  async getSpecificFeedbackForActivity(idActivity) {\n    try {\n      let response = await fetch(`${SERVER}/feedback-api/feedbacks/${idActivity}`);\n      let data = await response.json();\n      this.specificFeedbacksActivity = data;\n      this.specificFeedbacksActivity.forEach(fdb => {\n        if (fdb.emoji.includes(\"smiley\")) {\n          ++this.smileyCount;\n        }\n\n        if (fdb.emoji.includes(\"frowny\")) {\n          ++this.frownyCount;\n        }\n\n        if (fdb.emoji.includes(\"surprised\")) {\n          ++this.surprisedCount;\n        }\n\n        if (fdb.emoji.includes(\"confused\")) {\n          ++this.confusedCount;\n        }\n      });\n      this.emitter.emit('GET_SPECIFIC_FEEDBACK_SUCCES');\n    } catch (err) {\n      console.warn(err);\n      this.emitter.emit('GET_SPECIFIC_FEEDBACK_ERROR');\n    }\n  }\n\n  async addFeedback(feedback) {\n    try {\n      await fetch(`${SERVER}/feedback-api/feedbacks/add `, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(feedback)\n      });\n    } catch (err) {\n      console.warn(err);\n      this.emitter.emit('ADD_FEEDBACK_ERROR');\n    }\n  }\n\n}\n\nexport default FeedbackStore;","map":{"version":3,"sources":["C:/Users/User/Desktop/facultate/tehWEB/ProiectTehWeb/react-frontend/src/Stores/FeedbackStore.js"],"names":["EventEmitter","SERVER","FeedbackStore","constructor","emitter","feedbacks","specificFeedbacksActivity","smileyCount","frownyCount","surprisedCount","confusedCount","getFeedbacks","response","fetch","data","json","forEach","feedback","push","id_activity","emoji","emit","err","console","warn","getSpecificFeedbackForActivity","idActivity","fdb","includes","addFeedback","method","headers","body","JSON","stringify"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AAEA,MAAMC,MAAM,GAAG,uBAAf;;AAEA,MAAMC,aAAN,CAAoB;AAChBC,EAAAA,WAAW,GAAG;AACV,SAAKC,OAAL,GAAe,IAAIJ,YAAJ,EAAf;AACA,SAAKK,SAAL,GAAiB,EAAjB;AACA,SAAKC,yBAAL,GAAiC,EAAjC;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,cAAL,GAAsB,CAAtB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACH;;AAED,QAAMC,YAAN,GACA;AACI,QAAI;AACA,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEZ,MAAO,yBAAX,CAA1B;AACA,UAAIa,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AAEAD,MAAAA,IAAI,CAACE,OAAL,CAAaC,QAAQ,IAAI;AACrB,aAAKZ,SAAL,CAAea,IAAf,CAAoB;AAACC,UAAAA,WAAW,EAAEF,QAAQ,CAACE,WAAvB;AAAoCC,UAAAA,KAAK,EAAEH,QAAQ,CAACG;AAApD,SAApB;AACH,OAFD;AAGA,WAAKhB,OAAL,CAAaiB,IAAb,CAAkB,sBAAlB;AAEH,KATD,CASE,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAaF,GAAb;AACA,WAAKlB,OAAL,CAAaiB,IAAb,CAAkB,oBAAlB;AACH;AACJ;;AAED,QAAMI,8BAAN,CAAqCC,UAArC,EACA;AACI,QAAI;AACA,UAAId,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEZ,MAAO,2BAA0ByB,UAAW,EAAhD,CAA1B;AACA,UAAIZ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACA,WAAKT,yBAAL,GAAiCQ,IAAjC;AACA,WAAKR,yBAAL,CAA+BU,OAA/B,CAAuCW,GAAG,IAAI;AAC9C,YAAIA,GAAG,CAACP,KAAJ,CAAUQ,QAAV,CAAmB,QAAnB,CAAJ,EACA;AACI,YAAE,KAAKrB,WAAP;AACH;;AACD,YAAIoB,GAAG,CAACP,KAAJ,CAAUQ,QAAV,CAAmB,QAAnB,CAAJ,EACA;AACI,YAAE,KAAKpB,WAAP;AACH;;AACD,YAAImB,GAAG,CAACP,KAAJ,CAAUQ,QAAV,CAAmB,WAAnB,CAAJ,EACA;AACI,YAAE,KAAKnB,cAAP;AACH;;AACD,YAAIkB,GAAG,CAACP,KAAJ,CAAUQ,QAAV,CAAmB,UAAnB,CAAJ,EACA;AACI,YAAE,KAAKlB,aAAP;AACH;AACJ,OAjBG;AAkBA,WAAKN,OAAL,CAAaiB,IAAb,CAAkB,8BAAlB;AACH,KAvBD,CAuBE,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAaF,GAAb;AACA,WAAKlB,OAAL,CAAaiB,IAAb,CAAkB,6BAAlB;AACH;AACJ;;AAED,QAAMQ,WAAN,CAAkBZ,QAAlB,EAA4B;AACxB,QAAI;AACA,YAAMJ,KAAK,CAAE,GAAEZ,MAAO,8BAAX,EAA0C;AACjD6B,QAAAA,MAAM,EAAE,MADyC;AAEjDC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFwC;AAKjDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,QAAf;AAL2C,OAA1C,CAAX;AAQH,KATD,CASE,OAAOK,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAaF,GAAb;AACA,WAAKlB,OAAL,CAAaiB,IAAb,CAAkB,oBAAlB;AACH;AACJ;;AAzEe;;AA4EpB,eAAenB,aAAf","sourcesContent":["import {EventEmitter} from 'fbemitter'\r\n\r\nconst SERVER = 'http://localhost:5000';\r\n\r\nclass FeedbackStore {\r\n    constructor() {\r\n        this.emitter = new EventEmitter();\r\n        this.feedbacks = [];\r\n        this.specificFeedbacksActivity = [];\r\n        this.smileyCount = 0;\r\n        this.frownyCount = 0;\r\n        this.surprisedCount = 0;\r\n        this.confusedCount = 0;\r\n    }\r\n\r\n    async getFeedbacks() \r\n    {\r\n        try {\r\n            let response = await fetch(`${SERVER}/feedback-api/feedbacks`)\r\n            let data = await response.json();\r\n\r\n            data.forEach(feedback => {\r\n                this.feedbacks.push({id_activity: feedback.id_activity, emoji: feedback.emoji});\r\n            });\r\n            this.emitter.emit('GET_FEEDBACK_SUCCESS');\r\n\r\n        } catch (err) {\r\n            console.warn(err);\r\n            this.emitter.emit('GET_FEEDBACK_ERROR');\r\n        }\r\n    }\r\n    \r\n    async getSpecificFeedbackForActivity(idActivity) \r\n    {\r\n        try {\r\n            let response = await fetch(`${SERVER}/feedback-api/feedbacks/${idActivity}`)\r\n            let data = await response.json();\r\n            this.specificFeedbacksActivity = data\r\n            this.specificFeedbacksActivity.forEach(fdb => {\r\n            if (fdb.emoji.includes(\"smiley\")) \r\n            {\r\n                ++this.smileyCount\r\n            }\r\n            if (fdb.emoji.includes(\"frowny\")) \r\n            {\r\n                ++this.frownyCount\r\n            }\r\n            if (fdb.emoji.includes(\"surprised\")) \r\n            {\r\n                ++this.surprisedCount\r\n            }\r\n            if (fdb.emoji.includes(\"confused\")) \r\n            {\r\n                ++this.confusedCount\r\n            }\r\n        })\r\n            this.emitter.emit('GET_SPECIFIC_FEEDBACK_SUCCES')\r\n        } catch (err) {\r\n            console.warn(err);\r\n            this.emitter.emit('GET_SPECIFIC_FEEDBACK_ERROR');\r\n        }\r\n    }\r\n\r\n    async addFeedback(feedback) {\r\n        try {\r\n            await fetch(`${SERVER}/feedback-api/feedbacks/add `, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(feedback)\r\n            })\r\n\r\n        } catch (err) {\r\n            console.warn(err)\r\n            this.emitter.emit('ADD_FEEDBACK_ERROR')\r\n        }\r\n    }\r\n}\r\n\r\nexport default FeedbackStore;"]},"metadata":{},"sourceType":"module"}