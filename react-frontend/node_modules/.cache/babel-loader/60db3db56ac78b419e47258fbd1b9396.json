{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\facultate\\\\tehWEB\\\\ProiectTehWeb\\\\react-frontend\\\\src\\\\Components\\\\Student.js\";\nimport React, { Component } from 'react';\nimport StudentStore from \"../Stores/StudentStore\";\nimport ActivityStore from \"../Stores/ActivityStore\";\nimport HeaderStudent from \"../Containers/HeaderStudent\";\nimport '../Style/button.css';\n\nclass Student extends Component {\n  constructor(props) {\n    super(props);\n    this.store = new StudentStore();\n    this.storeActivity = new ActivityStore();\n    this.state = {\n      activities: [],\n      studentID: 0,\n      activityID: 0,\n      activity: null,\n      student: null,\n      nameStud: ''\n    };\n    this.state.studentID = this.props.match.params.id;\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleClick = evt => {\n      // check if the input activity exits in the db\n      let check = false;\n      this.state.activities.forEach(act => {\n        //console.log(act)\n        if (act.id == this.state.activityID) {\n          check = true;\n          this.state.activity = act;\n        }\n      });\n      console.log(\"Check variable value is: \" + check);\n\n      if (!check) {\n        console.log(\"There is no activity with this id!!!: \" + this.state.activityID);\n        alert(\"Activitatea introdusa nu exista!!\");\n      } else {\n        console.log('Input for activity: ' + this.state.activityID);\n        /*this.store.emitter.addListener('GET_ACTIVITY_SUCCESS', () => {\r\n            this.setState({\r\n                activity: this.store.activity\r\n            })\r\n        });\r\n        this.store.getActivityById(this.state.activityID);\r\n        debugger*/\n\n        if (this.state.activity !== null) {\n          console.log(\"This is the input activity: \" + this.state.activity.name);\n          let today = new Date();\n          var dd = String(today.getDate()).padStart(2, '0');\n          var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n          var yyyy = today.getFullYear();\n          today = yyyy + '-' + mm + '-' + dd;\n          let start_date = \"\";\n\n          for (let i = 0; i < 10; ++i) start_date += this.state.activity.start_date[i];\n\n          console.log(\"Fixed start date: \" + start_date);\n          let end_date = \"\";\n\n          for (let i = 0; i < 10; ++i) end_date += this.state.activity.end_date[i];\n\n          console.log(\"Fixed end date: \" + end_date);\n          console.log(\"Current Date: \" + today + \" Start date: \" + start_date + \" End date: \" + end_date);\n\n          if (today >= start_date && today <= end_date) {\n            console.log(\"Activity valid!!!\");\n            this.props.history.push('/activity/' + this.state.studentID + \"/\" + this.state.activityID);\n          } else {\n            alert(\"Activitatea nu este disponibila!\");\n            console.log(\"Activity not valid!!!\");\n          }\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.storeActivity.getActivities();\n    this.storeActivity.emitter.addListener('GET_ACTIVITIES_SUCCESS', () => {\n      this.setState({\n        activities: this.storeActivity.activities\n      });\n    });\n    this.store.getStudentById(this.state.studentID);\n    this.store.emitter.addListener('GET_STUDENT_SUCCESS', () => {\n      this.setState({\n        student: this.store.student,\n        nameStud: this.store.student.nameStud\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HeaderStudent, {\n      nameStud: this.state.nameStud,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 24\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"activityID\",\n      placeholder: \"Introduceti codul de acces al activitatii\",\n      name: \"activityID\",\n      defaultValue: \"\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      className: \"btnAccess\",\n      value: \"Acceseaza activitate\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Student;","map":{"version":3,"sources":["C:/Users/User/Desktop/facultate/tehWEB/ProiectTehWeb/react-frontend/src/Components/Student.js"],"names":["React","Component","StudentStore","ActivityStore","HeaderStudent","Student","constructor","props","store","storeActivity","state","activities","studentID","activityID","activity","student","nameStud","match","params","id","handleChange","evt","setState","target","name","value","handleClick","check","forEach","act","console","log","alert","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","start_date","i","end_date","history","push","componentDidMount","getActivities","emitter","addListener","getStudentById","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport StudentStore from \"../Stores/StudentStore\";\r\nimport ActivityStore from \"../Stores/ActivityStore\";\r\nimport HeaderStudent from \"../Containers/HeaderStudent\";\r\nimport '../Style/button.css';\r\n\r\nclass Student extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.store = new StudentStore();\r\n        this.storeActivity = new ActivityStore()\r\n        this.state = {\r\n            activities: [],\r\n            studentID: 0,\r\n            activityID: 0,\r\n            activity: null,\r\n            student: null,\r\n            nameStud: ''\r\n        };\r\n\r\n        this.state.studentID = this.props.match.params.id;\r\n\r\n        this.handleChange = (evt) => {\r\n            this.setState({\r\n                [evt.target.name]: evt.target.value\r\n            })\r\n        };\r\n\r\n\r\n        this.handleClick = (evt) => {\r\n            // check if the input activity exits in the db\r\n            let check = false\r\n            this.state.activities.forEach(act => {\r\n                //console.log(act)\r\n                if (act.id == this.state.activityID) {\r\n                    check = true\r\n                    this.state.activity = act\r\n                }\r\n            })\r\n            \r\n            console.log(\"Check variable value is: \" + check)\r\n            \r\n            if (!check) {\r\n                console.log(\"There is no activity with this id!!!: \" + this.state.activityID)\r\n                alert(\"Activitatea introdusa nu exista!!\")\r\n            } else {\r\n                \r\n                console.log('Input for activity: ' + this.state.activityID)\r\n    \r\n                /*this.store.emitter.addListener('GET_ACTIVITY_SUCCESS', () => {\r\n                    this.setState({\r\n                        activity: this.store.activity\r\n                    })\r\n                });\r\n                this.store.getActivityById(this.state.activityID);\r\n                debugger*/\r\n    \r\n                if (this.state.activity !== null) {\r\n                    console.log(\"This is the input activity: \" + this.state.activity.name)\r\n                    let today = new Date();\r\n                    var dd = String(today.getDate()).padStart(2, '0');\r\n                    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n                    var yyyy = today.getFullYear();\r\n    \r\n                    today = yyyy + '-' + mm + '-' + dd;\r\n                    \r\n                    let start_date = \"\"\r\n                    for (let i = 0; i < 10; ++i)\r\n                         start_date += this.state.activity.start_date[i];\r\n                    console.log(\"Fixed start date: \" + start_date)\r\n                    \r\n                    let end_date = \"\"\r\n                    for (let i = 0; i < 10; ++i)\r\n                         end_date += this.state.activity.end_date[i];\r\n                    console.log(\"Fixed end date: \" + end_date)\r\n                    \r\n                     console.log(\"Current Date: \" + today + \" Start date: \" + start_date +\r\n                            \" End date: \" + end_date)\r\n                    \r\n                    if (today >= start_date && today <= end_date) {\r\n                        console.log(\"Activity valid!!!\")\r\n                        this.props.history.push('/activity/' + this.state.studentID + \"/\" + this.state.activityID)\r\n                    } else {\r\n                        alert(\"Activitatea nu este disponibila!\")\r\n                        console.log(\"Activity not valid!!!\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n       this.storeActivity.getActivities()\r\n        this.storeActivity.emitter.addListener('GET_ACTIVITIES_SUCCESS', () => {\r\n            this.setState({\r\n                activities : this.storeActivity.activities\r\n            })\r\n        })\r\n        \r\n        this.store.getStudentById(this.state.studentID);\r\n\r\n        this.store.emitter.addListener('GET_STUDENT_SUCCESS',()=>{\r\n            this.setState({\r\n                student:this.store.student,\r\n                nameStud:this.store.student.nameStud,\r\n            \r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <HeaderStudent nameStud={this.state.nameStud}/>\r\n\r\n                <label><br/>\r\n                    <input type=\"text\" className=\"activityID\" placeholder=\"Introduceti codul de acces al activitatii\"\r\n                           name=\"activityID\" defaultValue=\"\" onChange={this.handleChange}/>\r\n                    <br/>\r\n                </label>\r\n                <input type=\"button\" className=\"btnAccess\" value=\"Acceseaza activitate\" onClick={this.handleClick}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Student;\r\n"]},"metadata":{},"sourceType":"module"}