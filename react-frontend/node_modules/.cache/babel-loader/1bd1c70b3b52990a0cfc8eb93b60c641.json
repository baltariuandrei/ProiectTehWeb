{"ast":null,"code":"import { EventEmitter } from 'fbemitter';\nconst SERVER = 'http://localhost:5000';\n\nclass StudentStore {\n  constructor() {\n    this.studentsDB = [];\n    this.activities = [];\n    this.emitter = new EventEmitter();\n    this.activity = null;\n    this.student = null;\n  }\n\n  async getActivityById(activityID) {\n    try {\n      let response = await fetch(`${SERVER}/activity-api/activities/${activityID}`);\n      let data = await response.json();\n      this.activity = {\n        id: data.id,\n        name: data.name,\n        start_date: data.start_date,\n        end_date: data.end_date\n      };\n      this.emitter.emit('GET_ACTIVITY_SUCCESS');\n    } catch (err) {\n      console.warn(err);\n      this.emitter.emit('GET_ACTIVITY_ERROR');\n    }\n  }\n\n  async getStudentById(studentID) {\n    try {\n      let response = await fetch(`${SERVER}/student-api/students/${studentID}`);\n      let data = await response.json();\n      this.student = {\n        id: data.id,\n        nameStud: data.name\n      };\n      this.emitter.emit('GET_STUDENT_SUCCESS');\n    } catch (err) {\n      console.warn(err);\n      this.emitter.emit('GET_STUDENT_ERROR');\n    }\n  }\n\n  async getStudents() {\n    try {\n      let response = await fetch(`${SERVER}/student-api/students`);\n      let data = await response.json();\n      data.forEach(stud => {\n        this.studentsDB.push({\n          id: stud.id,\n          usernameStudDB: stud.username,\n          passwordStudDB: stud.pass\n        });\n      });\n      this.emitter.emit('GET_STUDENTS_SUCCESS');\n    } catch (err) {\n      console.warn(err);\n      this.emitter.emit('GET_STUDENTS_ERROR');\n    }\n  }\n\n}\n\nexport default StudentStore;","map":{"version":3,"sources":["C:/Users/User/Desktop/facultate/tehWEB/ProiectTehWeb/react-frontend/src/Stores/StudentStore.js"],"names":["EventEmitter","SERVER","StudentStore","constructor","studentsDB","activities","emitter","activity","student","getActivityById","activityID","response","fetch","data","json","id","name","start_date","end_date","emit","err","console","warn","getStudentById","studentID","nameStud","getStudents","forEach","stud","push","usernameStudDB","username","passwordStudDB","pass"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AAEA,MAAMC,MAAM,GAAG,uBAAf;;AAEA,MAAMC,YAAN,CAAmB;AACfC,EAAAA,WAAW,GAAG;AACV,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,OAAL,GAAe,IAAIN,YAAJ,EAAf;AACA,SAAKO,QAAL,GAAgB,IAAhB;AACA,SAAKC,OAAL,GAAe,IAAf;AACH;;AAED,QAAMC,eAAN,CAAsBC,UAAtB,EACA;AACI,QAAI;AACA,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,MAAO,4BAA2BS,UAAW,EAAjD,CAA1B;AACA,UAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACA,WAAKP,QAAL,GAAgB;AAACQ,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAV;AAAcC,QAAAA,IAAI,EAAEH,IAAI,CAACG,IAAzB;AAA+BC,QAAAA,UAAU,EAAEJ,IAAI,CAACI,UAAhD;AAA4DC,QAAAA,QAAQ,EAAEL,IAAI,CAACK;AAA3E,OAAhB;AACA,WAAKZ,OAAL,CAAaa,IAAb,CAAkB,sBAAlB;AAEH,KAND,CAME,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAaF,GAAb;AACA,WAAKd,OAAL,CAAaa,IAAb,CAAkB,oBAAlB;AACH;AACJ;;AAED,QAAMI,cAAN,CAAqBC,SAArB,EACA;AACI,QAAI;AACA,UAAIb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,MAAO,yBAAwBuB,SAAU,EAA7C,CAA1B;AACA,UAAIX,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACA,WAAKN,OAAL,GAAe;AAACO,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAV;AAAcU,QAAAA,QAAQ,EAAEZ,IAAI,CAACG;AAA7B,OAAf;AACA,WAAKV,OAAL,CAAaa,IAAb,CAAkB,qBAAlB;AAEH,KAND,CAME,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAaF,GAAb;AACA,WAAKd,OAAL,CAAaa,IAAb,CAAkB,mBAAlB;AACH;AACJ;;AAED,QAAMO,WAAN,GACA;AACI,QAAI;AACA,UAAIf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,MAAO,uBAAX,CAA1B;AACA,UAAIY,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACAD,MAAAA,IAAI,CAACc,OAAL,CAAaC,IAAI,IAAI;AACjB,aAAKxB,UAAL,CAAgByB,IAAhB,CAAqB;AAACd,UAAAA,EAAE,EAAEa,IAAI,CAACb,EAAV;AAAce,UAAAA,cAAc,EAAEF,IAAI,CAACG,QAAnC;AAA6CC,UAAAA,cAAc,EAAEJ,IAAI,CAACK;AAAlE,SAArB;AACH,OAFD;AAGA,WAAK3B,OAAL,CAAaa,IAAb,CAAkB,sBAAlB;AACH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAaF,GAAb;AACA,WAAKd,OAAL,CAAaa,IAAb,CAAkB,oBAAlB;AACH;AACJ;;AAlDc;;AAqDnB,eAAejB,YAAf","sourcesContent":["import {EventEmitter} from 'fbemitter'\r\n\r\nconst SERVER = 'http://localhost:5000';\r\n\r\nclass StudentStore {\r\n    constructor() {\r\n        this.studentsDB = [];\r\n        this.activities = [];\r\n        this.emitter = new EventEmitter();\r\n        this.activity = null;\r\n        this.student = null;\r\n    }\r\n\r\n    async getActivityById(activityID) \r\n    {\r\n        try {\r\n            let response = await fetch(`${SERVER}/activity-api/activities/${activityID}`)\r\n            let data = await response.json();\r\n            this.activity = {id: data.id, name: data.name, start_date: data.start_date, end_date: data.end_date};\r\n            this.emitter.emit('GET_ACTIVITY_SUCCESS');\r\n\r\n        } catch (err) {\r\n            console.warn(err);\r\n            this.emitter.emit('GET_ACTIVITY_ERROR');\r\n        }\r\n    }\r\n    \r\n    async getStudentById(studentID) \r\n    {\r\n        try {\r\n            let response = await fetch(`${SERVER}/student-api/students/${studentID}`)\r\n            let data = await response.json();\r\n            this.student = {id: data.id, nameStud: data.name};\r\n            this.emitter.emit('GET_STUDENT_SUCCESS');\r\n\r\n        } catch (err) {\r\n            console.warn(err);\r\n            this.emitter.emit('GET_STUDENT_ERROR');\r\n        }\r\n    }\r\n\r\n    async getStudents() \r\n    {\r\n        try {\r\n            let response = await fetch(`${SERVER}/student-api/students`);\r\n            let data = await response.json();\r\n            data.forEach(stud => {\r\n                this.studentsDB.push({id: stud.id, usernameStudDB: stud.username, passwordStudDB: stud.pass});\r\n            });\r\n            this.emitter.emit('GET_STUDENTS_SUCCESS');\r\n        } catch (err) {\r\n            console.warn(err);\r\n            this.emitter.emit('GET_STUDENTS_ERROR');\r\n        }\r\n    }\r\n}\r\n\r\nexport default StudentStore;\r\n"]},"metadata":{},"sourceType":"module"}